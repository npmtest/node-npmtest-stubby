{"/home/travis/build/npmtest/node-npmtest-stubby/test.js":"/* istanbul instrument in package npmtest_stubby */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stubby/lib.npmtest_stubby.js":"/* istanbul instrument in package npmtest_stubby */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_stubby = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_stubby = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-stubby/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-stubby && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_stubby */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_stubby\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_stubby.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_stubby.rollup.js'] =\n            local.assetsDict['/assets.npmtest_stubby.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_stubby.__dirname + '/lib.npmtest_stubby.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/main.js":"'use strict';\n\nvar Admin = require('./portals/admin').Admin;\nvar Stubs = require('./portals/stubs').Stubs;\nvar Endpoints = require('./models/endpoints').Endpoints;\nvar Watcher = require('./console/watch');\nvar async = require('async');\nvar CLI = require('./console/cli');\nvar out = require('./console/out');\nvar http = require('http');\nvar https = require('https');\nvar contract = require('./models/contract');\nvar couldNotSave = \"The supplied endpoint data couldn't be saved\";\n\nfunction noop() {}\n\nfunction onListening(portal, port, protocol, location) {\n  if (protocol == null) { protocol = 'http'; }\n  out.status(portal + ' portal running at ' + protocol + '://' + location + ':' + port);\n}\n\nfunction onError(err, port, location) {\n  var msg;\n\n  switch (err.code) {\n    case 'EACCES':\n      msg = 'Permission denied for use of port ' + port + '. Exiting...';\n      break;\n    case 'EADDRINUSE':\n      msg = 'Port ' + port + ' is already in use! Exiting...';\n      break;\n    case 'EADDRNOTAVAIL':\n      msg = 'Host \"' + location + '\" is not available! Exiting...';\n      break;\n    default:\n      msg = err.message + '. Exiting...';\n  }\n  out.error(msg);\n  console.dir(err); // eslint-disable-line\n  process.exit();\n}\n\nfunction onEndpointLoaded(err, endpoint) {\n  out.notice('Loaded: ' + endpoint.request.method + ' ' + endpoint.request.url);\n}\n\nfunction setupStartOptions(options, callback) {\n  var defaults, key;\n\n  options = options == null ? {} : options;\n  callback = callback == null ? noop : callback;\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  if (options.quiet == null) { options.quiet = true; }\n\n  defaults = CLI.getArgs([]);\n  for (key in defaults) {\n    if (options[key] == null) {\n      options[key] = defaults[key];\n    }\n  }\n\n  out.quiet = options.quiet;\n  return [options, callback];\n}\n\nfunction createHttpsOptions(options) {\n  var httpsOptions = options._httpsOptions || {};\n\n  if (options.key && options.cert) {\n    httpsOptions.key = options.key;\n    httpsOptions.cert = options.cert;\n  } else if (options.pfx) {\n    httpsOptions.pfx = options.pfx;\n  }\n\n  return httpsOptions;\n}\n\nfunction Stubby() {\n  this.endpoints = new Endpoints();\n  this.stubsPortal = null;\n  this.tlsPortal = null;\n  this.adminPortal = null;\n}\n\nStubby.prototype.start = function (o, cb) {\n  var oc = setupStartOptions(o, cb);\n  var options = oc[0];\n  var callback = oc[1];\n  var self = this;\n\n  this.stop(function () {\n    var errors = contract(options.data);\n\n    if (errors) { return callback(errors); }\n    if (options.datadir != null) { self.endpoints.datadir = options.datadir; }\n\n    self.endpoints.create(options.data, onEndpointLoaded);\n\n    self.tlsPortal = https.createServer(createHttpsOptions(options), new Stubs(self.endpoints).server);\n    self.tlsPortal.on('listening', function () { onListening('Stubs', options.tls, 'https', options.location); });\n    self.tlsPortal.on('error', function (err) { onError(err, options.tls, options.location); });\n    self.tlsPortal.listen(options.tls, options.location);\n\n    self.stubsPortal = http.createServer(new Stubs(self.endpoints).server);\n    self.stubsPortal.on('listening', function () { onListening('Stubs', options.stubs, 'http', options.location); });\n    self.stubsPortal.on('error', function (err) { onError(err, options.stubs, options.location); });\n    self.stubsPortal.listen(options.stubs, options.location);\n\n    self.adminPortal = http.createServer(new Admin(self.endpoints).server);\n    self.adminPortal.on('listening', function () { onListening('Admin', options.admin, 'http', options.location); });\n    self.adminPortal.on('error', function (err) { onError(err, options.admin, options.location); });\n    self.adminPortal.listen(options.admin, options.location);\n\n    if (options.watch) { self.watcher = new Watcher(self.endpoints, options.watch); }\n\n    out.info('\\nQuit: ctrl-c\\n');\n    callback();\n  });\n};\n\nStubby.prototype.stop = function (callback) {\n  var self = this;\n\n  if (callback == null) { callback = noop; }\n\n  setTimeout(function () {\n    if (self.watcher != null) { self.watcher.deactivate(); }\n\n    async.parallel({\n      closeAdmin: function (cb) {\n        if (self.adminPortal && self.adminPortal.address()) { self.adminPortal.close(cb); } else { cb(); }\n      },\n      closeStubs: function (cb) {\n        if (self.stubsPortal && self.stubsPortal.address()) { self.stubsPortal.close(cb); } else { cb(); }\n      },\n      closeTls: function (cb) {\n        if (self.tlsPortal && self.tlsPortal.address()) { self.tlsPortal.close(cb); } else { return cb(); }\n      }\n    }, callback);\n  }, 1);\n};\n\nStubby.prototype.post = function (data, callback) {\n  var self = this;\n\n  if (callback == null) { callback = noop; }\n\n  setTimeout(function () {\n    if (contract(data)) { callback(couldNotSave); } else { self.endpoints.create(data, callback); }\n  }, 1);\n};\n\nStubby.prototype.get = function (id, callback) {\n  var self = this;\n\n  if (id == null) { id = noop; }\n  if (callback == null) { callback = id; }\n\n  setTimeout(function () {\n    if (typeof id === 'function') { self.endpoints.gather(callback); } else { self.endpoints.retrieve(id, callback); }\n  }, 1);\n};\n\nStubby.prototype.put = function (id, data, callback) {\n  var self = this;\n\n  if (callback == null) { callback = noop; }\n\n  setTimeout(function () {\n    if (contract(data)) { callback(couldNotSave); } else { self.endpoints.update(id, data, callback); }\n  }, 1);\n};\n\nStubby.prototype.delete = function (id, callback) {\n  var self = this;\n\n  if (id == null) { id = noop; }\n  if (callback == null) { callback = id; }\n\n  setTimeout(function () {\n    if (typeof id === 'function') {\n      delete self.endpoints.db;\n      self.endpoints.db = {};\n      callback();\n    } else {\n      self.endpoints.delete(id, callback);\n    }\n  }, 1);\n};\n\nmodule.exports.Stubby = Stubby;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/portals/admin.js":"'use strict';\n\nvar contract = require('../models/contract');\nvar Portal = require('./portal').Portal;\nvar ns = require('node-static');\nvar path = require('path');\nvar status = new ns.Server(path.resolve(__dirname, '../../webroot'));\n\nfunction Admin(endpoints) {\n  Portal.call(this);\n  this.server = this.server.bind(this);\n  this.endpoints = endpoints;\n  this.contract = contract;\n  this.name = '[admin]';\n}\n\nAdmin.prototype = Object.create(Portal.prototype);\nAdmin.prototype.constructor = Admin;\n\nAdmin.prototype.urlPattern = /^\\/([1-9][0-9]*)?$/;\n\nAdmin.prototype.goPong = function (response) {\n  this.writeHead(response, 200, {\n    'Content-Type': 'text/plain'\n  });\n\n  response.end('pong');\n};\n\nAdmin.prototype.goPUT = function (request, response) {\n  var id = this.getId(request.url);\n  var data = '';\n  var self = this;\n\n  if (!id) { return this.notSupported(response); }\n\n  request.on('data', function (chunk) { data += chunk; });\n  request.on('end', function () { self.processPUT(id, data, response); });\n};\n\nAdmin.prototype.goPOST = function (request, response) {\n  var id = this.getId(request.url);\n  var data = '';\n  var self = this;\n\n  if (id) { return this.notSupported(response); }\n\n  request.on('data', function (chunk) { data += chunk; });\n  request.on('end', function () { self.processPOST(data, response, request); });\n};\n\nAdmin.prototype.goDELETE = function (request, response) {\n  var id = this.getId(request.url);\n  var self = this;\n\n  if (!id) { return this.notSupported(response); }\n\n  function callback(err) {\n    if (err) { self.notFound(response); } else { self.noContent(response); }\n  }\n\n  this.endpoints.delete(id, callback);\n};\n\nAdmin.prototype.goGET = function (request, response) {\n  var callback;\n  var id = this.getId(request.url);\n  var self = this;\n\n  if (id) {\n    callback = function (err, endpoint) {\n      if (err) { self.notFound(response); } else { self.ok(response, endpoint); }\n    };\n\n    return this.endpoints.retrieve(id, callback);\n  }\n\n  callback = function (err, data) {\n    if (data.length === 0) { self.noContent(response); } else { self.ok(response, data); }\n  };\n\n  return this.endpoints.gather(callback);\n};\n\nAdmin.prototype.processPUT = function (id, data, response) {\n  var errors;\n  var self = this;\n\n  try { data = JSON.parse(data); } catch (e) { return this.badRequest(response); }\n\n  errors = this.contract(data);\n  if (errors) { return this.badRequest(response, errors); }\n\n  function callback(err) {\n    if (err) { self.notFound(response); } else { self.noContent(response); }\n  }\n\n  this.endpoints.update(id, data, callback);\n};\n\nAdmin.prototype.processPOST = function (data, response, request) {\n  var errors;\n  var self = this;\n\n  try { data = JSON.parse(data); } catch (e) { return this.badRequest(response); }\n\n  errors = this.contract(data);\n  if (errors) { return this.badRequest(response, errors); }\n  function callback(err, endpoint) {\n    self.created(response, request, endpoint.id);\n  }\n\n  this.endpoints.create(data, callback);\n};\n\nAdmin.prototype.ok = function (response, result) {\n  this.writeHead(response, 200, {\n    'Content-Type': 'application/json'\n  });\n\n  if (result != null) { return response.end(JSON.stringify(result)); }\n  return response.end();\n};\n\nAdmin.prototype.created = function (response, request, id) {\n  this.writeHead(response, 201, {\n    Location: request.headers.host + '/' + id\n  });\n\n  response.end();\n};\n\nAdmin.prototype.noContent = function (response) {\n  response.statusCode = 204;\n  response.end();\n};\n\nAdmin.prototype.badRequest = function (response, errors) {\n  this.writeHead(response, 400, {\n    'Content-Type': 'application/json'\n  });\n\n  response.end(JSON.stringify(errors));\n};\n\nAdmin.prototype.notSupported = function (response) {\n  response.statusCode = 405;\n  response.end();\n};\n\nAdmin.prototype.notFound = function (response) {\n  this.writeHead(response, 404, {\n    'Content-Type': 'text/plain'\n  });\n\n  response.end();\n};\n\nAdmin.prototype.saveError = function (response) {\n  this.writeHead(response, 422, {\n    'Content-Type': 'text/plain'\n  });\n\n  response.end();\n};\n\nAdmin.prototype.serverError = function (response) {\n  this.writeHead(response, 500, {\n    'Content-Type': 'text/plain'\n  });\n\n  response.end();\n};\n\nAdmin.prototype.urlValid = function (url) {\n  return url.match(this.urlPattern) != null;\n};\n\nAdmin.prototype.getId = function (url) {\n  return url.replace(this.urlPattern, '$1');\n};\n\nAdmin.prototype.server = function (request, response) {\n  var self = this;\n\n  this.received(request, response);\n\n  response.on('finish', function () {\n    self.responded(response.statusCode, request.url);\n  });\n\n  if (request.url === '/ping') { return this.goPong(response); }\n  if (/^\\/(status|js|css)(\\/.*)?$/.test(request.url)) { return status.serve(request, response); }\n\n  if (this.urlValid(request.url)) {\n    switch (request.method.toUpperCase()) {\n      case 'PUT':\n        return this.goPUT(request, response);\n      case 'POST':\n        return this.goPOST(request, response);\n      case 'DELETE':\n        return this.goDELETE(request, response);\n      case 'GET':\n        return this.goGET(request, response);\n      default:\n        return this.notSupported(response);\n    }\n  } else {\n    return this.notFound(response);\n  }\n};\n\nmodule.exports.Admin = Admin;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/models/contract.js":"'use strict';\n\nvar httpMethods = [\n  'GET',\n  'PUT',\n  'POST',\n  'HEAD',\n  'PATCH',\n  'TRACE',\n  'DELETE',\n  'CONNECT',\n  'OPTIONS'\n];\n\nvar messages = {\n  json: 'An unparseable JSON string was supplied.',\n  request: {\n    missing: \"'request' object is required.\",\n    url: \"'request.url' is required.\",\n    query: {\n      type: \"'request.query', if supplied, must be an object.\"\n    },\n    method: \"'request.method' must be one of \" + httpMethods + '.',\n    headers: {\n      type: \"'request.headers', if supplied, must be an object.\"\n    }\n  },\n  response: {\n    headers: {\n      type: \"'response.headers', if supplied, must be an object.\"\n    },\n    status: {\n      type: \"'response.status' must be integer-like.\",\n      small: \"'response.status' must be >= 100.\",\n      large: \"'response.status' must be < 600.\"\n    },\n    latency: {\n      type: \"'response.latency' must be integer-like.\"\n    }\n  }\n};\n\nvar response = {\n  status: function (status) {\n    var parsed;\n\n    if (!status) { return null; }\n\n    parsed = parseInt(status, 10);\n\n    if (!parsed) { return messages.response.status.type; }\n    if (parsed < 100) { return messages.response.status.small; }\n    if (parsed >= 600) { return messages.response.status.large; }\n\n    return null;\n  },\n  headers: function (headers) {\n    if (!headers) { return null; }\n\n    if (headers instanceof Array || typeof headers !== 'object') {\n      return messages.response.headers.type;\n    }\n\n    return null;\n  },\n  latency: function (latency) {\n    if (!latency) { return null; }\n    if (!parseInt(latency, 10)) { return messages.response.latency.type; }\n\n    return null;\n  }\n};\n\nvar request = {\n  url: function (url) {\n    if (url) { return null; }\n\n    return messages.request.url;\n  },\n  headers: function (headers) {\n    if (!headers) { return null; }\n\n    if (headers instanceof Array || typeof headers !== 'object') {\n      return messages.request.headers.type;\n    }\n\n    return null;\n  },\n  method: function (method) {\n    var i;\n    if (!method) { return null; }\n\n    if (!(method instanceof Array)) {\n      if (httpMethods.indexOf(method.toUpperCase()) !== -1) {\n        return null;\n      }\n\n      return messages.request.method;\n    }\n\n    for (i = 0; i < method.length; i++) {\n      if (httpMethods.indexOf(method[i].toUpperCase()) === -1) {\n        return messages.request.method;\n      }\n    }\n\n    return null;\n  },\n  query: function (query) {\n    if (!query) { return null; }\n\n    if (query instanceof Array || typeof query !== 'object') {\n      return messages.request.query.type;\n    }\n\n    return null;\n  }\n};\n\nfunction contract(endpoint) {\n  var results, property;\n  var errors = [];\n\n  if (typeof endpoint === 'string') {\n    try {\n      endpoint = JSON.parse(endpoint);\n    } catch (e) {\n      return [messages.json];\n    }\n  }\n\n  if (endpoint instanceof Array) {\n    results = endpoint.map(function (it) { return contract(it); });\n    results = results.filter(function (result) { return result !== null; });\n\n    if (results.length === 0) { return null; }\n\n    return results;\n  }\n\n  if (!endpoint.request) {\n    errors.push(messages.request.missing);\n  } else {\n    for (property in request) {\n      if (request.hasOwnProperty(property)) {\n        errors.push(request[property](endpoint.request[property]));\n      }\n    }\n  }\n\n  if (endpoint.response) {\n    if (!(endpoint.response instanceof Array)) {\n      endpoint.response = [endpoint.response];\n    }\n\n    endpoint.response.forEach(function (incoming) {\n      for (property in response) {\n        if (response.hasOwnProperty(property)) {\n          errors.push(response[property](incoming[property]));\n        }\n      }\n    });\n  }\n\n  errors = errors.filter(function (error) { return error !== null; });\n  if (errors.length === 0) { errors = null; }\n  return errors;\n}\n\nmodule.exports = contract;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/portals/portal.js":"'use strict';\n\nvar CLI = require('../console/cli');\nvar out = require('../console/out');\nvar http = require('http');\n\nfunction Portal() {\n  this.name = 'portal';\n}\n\nPortal.prototype.writeHead = function (response, statusCode, headers) {\n  if (!response.headersSent) {\n    response.writeHead(statusCode, headers);\n  }\n  return response;\n};\n\nPortal.prototype.received = function (request, response) {\n  var date = new Date();\n  var hours = ('0' + date.getHours()).slice(-2);\n  var minutes = ('0' + date.getMinutes()).slice(-2);\n  var seconds = ('0' + date.getSeconds()).slice(-2);\n\n  out.incoming(hours + ':' + minutes + ':' + seconds + ' -> ' + request.method + ' ' + this.name + request.url);\n  response.setHeader('Server', 'stubby/' + CLI.version() + ' node/' + process.version + ' (' + process.platform + ' ' + process.arch + ')');\n\n  if (request.headers.origin != null) {\n    response.setHeader('Access-Control-Allow-Origin', request.headers.origin);\n    response.setHeader('Access-Control-Allow-Credentials', true);\n\n    if (request.headers['access-control-request-headers'] != null) {\n      response.setHeader('Access-Control-Allow-Headers', request.headers['access-control-request-headers']);\n    }\n\n    if (request.headers['access-control-request-method'] != null) {\n      response.setHeader('Access-Control-Allow-Methods', request.headers['access-control-request-method']);\n    }\n\n    if (request.method === 'OPTIONS') {\n      this.writeHead(response, 200, response.headers);\n      response.end();\n    }\n  }\n\n  return response;\n};\n\nPortal.prototype.responded = function (status, url, message) {\n  var fn;\n  var date = new Date();\n  var hours = ('0' + date.getHours()).slice(-2);\n  var minutes = ('0' + date.getMinutes()).slice(-2);\n  var seconds = ('0' + date.getSeconds()).slice(-2);\n\n  if (url == null) { url = ''; }\n  if (message == null) { message = http.STATUS_CODES[status]; }\n\n  switch (true) {\n    case status >= 400 && status < 600:\n      fn = 'error';\n      break;\n    case status >= 300:\n      fn = 'warn';\n      break;\n    case status >= 200:\n      fn = 'ok';\n      break;\n    case status >= 100:\n      fn = 'info';\n      break;\n    default:\n      fn = 'log';\n  }\n\n  out[fn](hours + ':' + minutes + ':' + seconds + ' <- ' + status + ' ' + this.name + url + ' ' + message);\n};\n\nmodule.exports.Portal = Portal;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/console/cli.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar yaml = require('js-yaml');\nvar out = require('./out');\nvar args = require('./args');\n\nvar options = [{\n  name: 'admin',\n  flag: 'a',\n  param: 'port',\n  default: 8889,\n  description: 'Port for admin portal. Defaults to 8889.'\n}, {\n  name: 'cert',\n  flag: 'c',\n  param: 'file',\n  default: __dirname + '/../../tls/cert.pem',\n  description: 'Certificate file. Use with --key.'\n}, {\n  name: 'data',\n  flag: 'd',\n  param: 'file',\n  description: 'Data file to pre-load endoints. YAML or JSON format.'\n}, {\n  name: 'help',\n  flag: 'h',\n  default: false,\n  description: 'This help text.'\n}, {\n  name: 'key',\n  flag: 'k',\n  param: 'file',\n  default: __dirname + '/../../tls/key.pem',\n  description: 'Private key file. Use with --cert.'\n}, {\n  name: 'location',\n  flag: 'l',\n  param: 'hostname',\n  default: '0.0.0.0',\n  description: 'Hostname at which to bind stubby.'\n}, {\n  name: 'quiet',\n  flag: 'q',\n  description: 'Prevent stubby from printing to the console.'\n}, {\n  name: 'pfx',\n  flag: 'p',\n  param: 'file',\n  description: 'PFX file. Ignored if used with --key/--cert'\n}, {\n  name: 'stubs',\n  flag: 's',\n  param: 'port',\n  default: 8882,\n  description: 'Port for stubs portal. Defaults to 8882.'\n}, {\n  name: 'tls',\n  flag: 't',\n  param: 'port',\n  default: 7443,\n  description: 'Port for https stubs portal. Defaults to 7443.'\n}, {\n  name: 'version',\n  flag: 'v',\n  description: \"Prints stubby's version number.\"\n}, {\n  name: 'watch',\n  flag: 'w',\n  description: 'Auto-reload data file when edits are made.'\n}];\n\nfunction help(go) {\n  if (go == null) { go = false; }\n  if (!go) { return; }\n\n  out.log(args.helpText(options, 'stubby'));\n  process.exit();\n}\n\nfunction version(go) {\n  var ver = (require('../../package.json')).version;\n\n  if (!go) { return ver; }\n\n  out.log(ver);\n  process.exit();\n}\n\nfunction data(filename) {\n  var filedata;\n\n  if (filename === null) { return []; }\n\n  try {\n    filedata = (fs.readFileSync(filename, 'utf8')).trim();\n  } catch (e) {\n    out.warn('File \"' + filename + '\" could not be found. Ignoring...');\n    return [];\n  }\n\n  try {\n    return yaml.load(filedata);\n  } catch (e) {\n    out.warn('Couldn\\'t parse \"' + filename + '\" due to syntax errors:');\n    out.log(e.message);\n    process.exit(0);\n  }\n}\n\nfunction key(file) { return readFile('k', 'key', file, 'pem'); }\nfunction cert(file) { return readFile('c', 'cert', file, 'pem'); }\nfunction pfx(file) { return readFile('p', 'pfx', file, 'pfx'); }\n\nfunction readFile(flag, option, filename, type) {\n  var filedata, extension;\n\n  if (filename === null) { return null; }\n\n  filedata = fs.readFileSync(filename, 'utf8');\n  extension = filename.replace(/^.*\\.([a-zA-Z0-9]+)$/, '$1');\n\n  if (!filedata) { return null; }\n\n  if (extension !== type) {\n    out.warn('[-' + flag + ', --' + option + '] only takes files of type .' + type + '. Ignoring...');\n    return null;\n  }\n\n  return filedata.trim();\n}\n\nfunction getArgs(argv) {\n  var self = this; // eslint-disable-line\n  var params;\n\n  if (argv == null) { argv = process.argv; }\n\n  params = args.parse(options, argv);\n  params.datadir = path.resolve(path.dirname(params.data || '.'));\n\n  if (params.watch) { params.watch = params.data; }\n\n  options.forEach(function (option) {\n    if (self[option.name] != null) {\n      params[option.name] = self[option.name](params[option.name]);\n    }\n  });\n\n  return params;\n}\n\nmodule.exports = {\n  options: options,\n  help: help,\n  version: version,\n  data: data,\n  key: key,\n  cert: cert,\n  pfx: pfx,\n  readFile: readFile,\n  getArgs: getArgs\n};\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/console/out.js":"'use strict';\n/* eslint-disable no-console */\n\nvar BOLD = '\\x1B[1m';\nvar BLACK = '\\x1B[30m';\nvar BLUE = '\\x1B[34m';\nvar CYAN = '\\x1B[36m';\nvar GREEN = '\\x1B[32m';\nvar MAGENTA = '\\x1B[35m';\nvar RED = '\\x1B[31m';\nvar YELLOW = '\\x1B[33m';\nvar RESET = '\\x1B[0m';\n\nvar out = {\n  quiet: false,\n  log: function (msg) {\n    if (this.quiet) { return; }\n    console.log(msg);\n  },\n  status: function (msg) {\n    if (this.quiet) { return; }\n    console.log(BOLD + BLACK + msg + RESET);\n  },\n  dump: function (data) {\n    if (this.quiet) { return; }\n    console.dir(data);\n  },\n  info: function (msg) {\n    if (this.quiet) { return; }\n    console.info(BLUE + msg + RESET);\n  },\n  ok: function (msg) {\n    if (this.quiet) { return; }\n    console.log(GREEN + msg + RESET);\n  },\n  error: function (msg) {\n    if (this.quiet) { return; }\n    console.error(RED + msg + RESET);\n  },\n  warn: function (msg) {\n    if (this.quiet) { return; }\n    console.warn(YELLOW + msg + RESET);\n  },\n  incoming: function (msg) {\n    if (this.quiet) { return; }\n    console.log(CYAN + msg + RESET);\n  },\n  notice: function (msg) {\n    if (this.quiet) { return; }\n    console.log(MAGENTA + msg + RESET);\n  },\n  trace: function () {\n    if (this.quiet) { return; }\n    console.log(RED);\n    console.trace();\n    console.log(RESET);\n  }\n};\n\nrequire('./colorsafe')(out);\n\nmodule.exports = out;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/console/colorsafe.js":"'use strict';\n/* eslint-disable no-console */\n\nfunction stripper(args) {\n  var key, value;\n  for (key in args) {\n    if (!args.hasOwnProperty(key)) { continue; }\n\n    value = args[key];\n    args[key] = value.replace(/\\u001b\\[(\\d+;?)+m/g, '');\n  }\n  return args;\n}\n\nfunction colorsafe(console) {\n  if (process.stdout.isTTY) { return true; }\n\n  console.raw = {};\n\n  ['log', 'warn', 'info', 'error'].forEach(function (fn) {\n    console.raw[fn] = console[fn];\n    console[fn] = function () { console.raw[fn].apply(console, stripper(arguments)); };\n  });\n\n  return false;\n}\n\nmodule.exports = colorsafe;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/console/args.js":"'use strict';\n\nvar pp = require('./prettyprint');\nvar UNARY_FLAGS = /^-[a-zA-Z]+$/;\nvar ANY_FLAG = /^-.+$/;\n\nfunction findOption(option, argv) {\n  var argIndex = -1;\n\n  if (option.flag != null) {\n    argIndex = indexOfFlag(option, argv);\n  }\n\n  if (argIndex === -1 && option.name != null) {\n    argIndex = argv.indexOf('--' + option.name);\n  }\n\n  return argIndex;\n}\n\nfunction indexOfFlag(option, argv) {\n  var index = -1;\n\n  argv.forEach(function (flag) {\n    if (!UNARY_FLAGS.test(flag)) { return; }\n    if (flag.indexOf(option.flag) === -1) { return; }\n    index = argv.indexOf(flag);\n  });\n\n  return index;\n}\n\nfunction optionSkipped(index, argv) {\n  return ANY_FLAG.test(argv[index + 1]);\n}\n\nfunction unaryCheck(option, argv) {\n  if (option.name != null && argv.indexOf('--' + option.name) !== -1) {\n    return true;\n  }\n  if (option.flag == null) {\n    return false;\n  }\n  return indexOfFlag(option, argv) !== -1;\n}\n\nfunction pullPassedValue(option, argv) {\n  var argIndex;\n\n  if (option.param == null) { return unaryCheck(option, argv); }\n\n  argIndex = findOption(option, argv);\n\n  if (argIndex === -1) { return option.default; }\n  if (argv[argIndex + 1] == null) { return option.default; }\n  if (!optionSkipped(argIndex, argv)) { return argv[argIndex + 1]; }\n\n  return option.default;\n}\n\nfunction parse(options, argv) {\n  var args = {};\n\n  if (argv == null) { argv = process.argv; }\n\n  options.forEach(function (option) {\n    if (option.default == null) { option.default = null; }\n    args[option.name || option.flag] = pullPassedValue(option, argv);\n  });\n\n  return args;\n}\n\nfunction helpText(options, programName) {\n  var inlineList = [];\n  var firstColumn = {};\n  var helpLines = [];\n  var gutter = 3;\n\n  options.forEach(function (option) {\n    var param = option.param != null\n                ? ' <' + option.param + '>'\n                : '';\n\n    firstColumn[option.name] = '-' + option.flag + ', --' + option.name + param;\n    inlineList.push('[-' + option.flag + param + ']');\n    gutter = Math.max(gutter, firstColumn[option.name].length + 3);\n  });\n\n  options.forEach(function (option) {\n    var helpLine = firstColumn[option.name];\n    helpLine += pp.spacing(gutter - helpLine.length);\n    helpLine += pp.wrap(option.description.split(' '), gutter);\n    helpLines.push(helpLine);\n  });\n\n  return programName + ' ' + pp.wrap(inlineList, programName.length + 1) + '\\n\\n' + helpLines.join('\\n');\n}\n\nmodule.exports = {\n  parse: parse,\n  helpText: helpText\n};\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/console/prettyprint.js":"'use strict';\n\nvar times = require('../prototype/times'); // eslint-disable-line\n\nfunction spacing(length) {\n  if (length == null) { length = 0; }\n  return ' '.times(length);\n}\n\nfunction wrap(tokens, continuation, columns) {\n  var wrapped, gutter;\n\n  if (continuation == null) { continuation = 0; }\n  if (columns == null) { columns = process.stdout.columns; }\n\n  if (continuation + tokens.join(' ').length <= columns) { return tokens.join(' '); }\n\n  wrapped = '';\n  gutter = spacing(continuation);\n\n  tokens.forEach(function (token) {\n    var lengthSoFar = continuation + wrapped.replace(/\\n/g, '').length % columns || columns;\n\n    if (lengthSoFar + token.length > columns) {\n      wrapped += '\\n' + gutter + token;\n    } else {\n      wrapped += ' ' + token;\n    }\n  });\n\n  return wrapped.trim();\n}\n\nmodule.exports = {\n  spacing: spacing,\n  wrap: wrap\n};\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/prototype/times.js":"'use strict';\n/* eslint-disable no-extend-native */\n\nfunction noop() {}\n\nObject.defineProperty(Number.prototype, 'times', {\n  configurable: true,\n  value: function (fn) {\n    var i;\n\n    if (fn == null) { fn = noop; }\n    if (this <= 0) { return this; }\n\n    for (i = 1; i <= this; i++) { fn(); }\n\n    return parseFloat(this);\n  }\n});\n\nObject.defineProperty(String.prototype, 'times', {\n  configurable: true,\n  value: function (num) {\n    var i;\n    var result = '';\n    var self = this;\n\n    if (num == null) { num = 1; }\n    if (num < 1) { return ''; }\n\n    for (i = 1; i <= num; i++) { result += self; }\n\n    return result;\n  }\n});\n\nmodule.exports = function (left, right) {\n  if (typeof left !== 'number') { return null; }\n\n  if (typeof right === 'function') {\n    return left.times(right);\n  }\n\n  if (typeof right === 'string') {\n    return right.times(left);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/portals/stubs.js":"'use strict';\n\nvar Portal = require('./portal').Portal;\nvar qs = require('querystring');\n\nfunction Stubs(endpoints) {\n  Portal.call(this);\n  this.server = this.server.bind(this);\n  this.Endpoints = endpoints;\n  this.name = '[stubs]';\n}\n\nStubs.prototype = Object.create(Portal.prototype);\nStubs.prototype.constructor = Stubs;\n\nStubs.prototype.server = function (request, response) {\n  var data = null;\n  var self = this;\n\n  request.on('data', function (chunk) {\n    data = data != null ? data : '';\n    data += chunk;\n\n    return data;\n  });\n\n  request.on('end', function () {\n    var criteria;\n\n    self.received(request, response);\n\n    criteria = {\n      url: extractUrl(request.url),\n      method: request.method,\n      post: data,\n      headers: request.headers,\n      query: extractQuery(request.url)\n    };\n\n    function callback(err, endpointResponse) {\n      if (err) {\n        self.writeHead(response, 404, {});\n        self.responded(404, request.url, 'is not a registered endpoint');\n      } else {\n        self.writeHead(response, endpointResponse.status, endpointResponse.headers);\n        response.write(endpointResponse.body);\n        self.responded(endpointResponse.status, request.url);\n      }\n\n      response.end();\n    }\n\n    try {\n      self.Endpoints.find(criteria, callback);\n    } catch (e) {\n      response.statusCode = 500;\n      self.responded(500, request.url, 'unexpectedly generated a server error: ' + e.message);\n      response.end();\n    }\n  });\n};\n\nfunction extractUrl(url) {\n  return url.replace(/(.*)\\?.*/, '$1');\n}\n\nfunction extractQuery(url) {\n  return qs.parse(url.replace(/^.*\\?(.*)$/, '$1'));\n}\n\nmodule.exports.Stubs = Stubs;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/models/endpoints.js":"'use strict';\n\nvar fs = require('fs');\nvar ejs = require('ejs');\nvar path = require('path');\nvar isutf8 = require('isutf8');\nvar Endpoint = require('./endpoint');\nvar clone = require('../lib/clone');\nvar NOT_FOUND = \"Endpoint with the given id doesn't exist.\";\nvar NO_MATCH = \"Endpoint with given request doesn't exist.\";\n\nfunction noop() {}\n\nfunction Endpoints(data, callback, datadir) {\n  if (callback == null) { callback = noop; }\n  if (datadir == null) { datadir = process.cwd(); }\n\n  this.datadir = datadir;\n  this.db = {};\n  this.lastId = 0;\n  this.create(data, callback);\n}\n\nEndpoints.prototype.create = function (data, callback) {\n  var self = this;\n\n  if (callback == null) { callback = noop; }\n\n  function insert(item) {\n    item = new Endpoint(item, self.datadir);\n    item.id = ++self.lastId;\n    self.db[item.id] = item;\n    callback(null, clone(item));\n  }\n\n  if (data instanceof Array) {\n    data.forEach(insert);\n  } else if (data) {\n    insert(data);\n  }\n};\n\nEndpoints.prototype.retrieve = function (id, callback) {\n  if (callback == null) { callback = noop; }\n\n  if (!this.db[id]) { return callback(NOT_FOUND); }\n\n  callback(null, clone(this.db[id]));\n};\n\nEndpoints.prototype.update = function (id, data, callback) {\n  var endpoint;\n\n  if (callback == null) { callback = noop; }\n\n  if (!this.db[id]) { return callback(NOT_FOUND); }\n\n  endpoint = new Endpoint(data, this.datadir);\n  endpoint.id = id;\n  this.db[endpoint.id] = endpoint;\n  callback();\n};\n\nEndpoints.prototype.delete = function (id, callback) {\n  if (callback == null) { callback = noop; }\n\n  if (!this.db[id]) { return callback(NOT_FOUND); }\n\n  delete this.db[id];\n  callback();\n};\n\nEndpoints.prototype.gather = function (callback) {\n  var id;\n  var all = [];\n\n  if (callback == null) { callback = noop; }\n\n  for (id in this.db) {\n    if (this.db.hasOwnProperty(id)) {\n      all.push(this.db[id]);\n    }\n  }\n\n  callback(null, clone(all));\n};\n\nEndpoints.prototype.find = function (data, callback) {\n  var id, endpoint, captures, matched;\n  if (callback == null) { callback = noop; }\n\n  for (id in this.db) {\n    if (!this.db.hasOwnProperty(id)) { continue; }\n\n    endpoint = this.db[id];\n    captures = endpoint.matches(data);\n\n    if (!captures) { continue; }\n\n    endpoint.hits++;\n    matched = clone(endpoint);\n    return this.found(matched, captures, callback);\n  }\n\n  return callback(NO_MATCH);\n};\n\nEndpoints.prototype.found = function (endpoint, captures, callback) {\n  var filename;\n  var response = endpoint.response[endpoint.hits % endpoint.response.length];\n  var _ref = response.body;\n\n  response.body = new Buffer(_ref != null ? _ref : 0, 'utf8');\n  response.headers['x-stubby-resource-id'] = endpoint.id;\n\n  if (response.file != null) {\n    filename = applyCaptures(response.file, captures);\n    try {\n      response.body = fs.readFileSync(path.resolve(this.datadir, filename));\n    } catch (e) { /* ignored */ }\n  }\n\n  applyCaptures(response, captures);\n\n  if (parseInt(response.latency, 10)) {\n    setTimeout(function () { callback(null, response); }, response.latency);\n  } else {\n    callback(null, response);\n  }\n};\n\nfunction applyCaptures(obj, captures) {\n  var results, key, value;\n  if (typeof obj === 'string') {\n    return ejs.render(obj.replace(/<%/g, '<%='), captures);\n  }\n\n  results = [];\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) { continue; }\n\n    value = obj[key];\n\n    // if a buffer looks like valid UTF-8, treat it as a string for capture replacement:\n    if (value instanceof Buffer && isutf8(value)) {\n      value = value.toString();\n    }\n\n    if (typeof value === 'string') {\n      results.push(obj[key] = ejs.render(value.replace(/<%/g, '<%='), captures));\n    } else {\n      results.push(applyCaptures(value, captures));\n    }\n  }\n\n  return results;\n}\n\nmodule.exports.Endpoints = Endpoints;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/models/endpoint.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar http = require('http');\nvar url = require('url');\nvar q = require('querystring');\nvar out = require('../console/out');\n\nfunction Endpoint(endpoint, datadir) {\n  if (endpoint == null) { endpoint = {}; }\n  if (datadir == null) { datadir = process.cwd(); }\n\n  Object.defineProperty(this, 'datadir', {value: datadir});\n\n  this.request = purifyRequest(endpoint.request);\n  this.response = purifyResponse(this, endpoint.response);\n  this.hits = 0;\n}\n\nEndpoint.prototype.matches = function (request) {\n  var file, post, json, upperMethods;\n  var matches = {};\n\n  matches.url = matchRegex(this.request.url, request.url);\n  if (!matches.url) { return null; }\n\n  matches.headers = compareHashMaps(this.request.headers, request.headers);\n  if (!matches.headers) { return null; }\n\n  matches.query = compareHashMaps(this.request.query, request.query);\n  if (!matches.query) { return null; }\n\n  file = null;\n  if (this.request.file != null) {\n    try {\n      file = fs.readFileSync(path.resolve(this.datadir, this.request.file), 'utf8');\n    } catch (e) { /* ignored */ }\n  }\n\n  post = file || this.request.post;\n  if (post && request.post) {\n    matches.post = matchRegex(normalizeEOL(post), normalizeEOL(request.post));\n    if (!matches.post) { return null; }\n  } else if (this.request.json && request.post) {\n    try {\n      json = JSON.parse(request.post);\n      if (!compareObjects(this.request.json, json)) { return null; }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  if (this.request.method instanceof Array) {\n    upperMethods = this.request.method.map(function (it) { return it.toUpperCase(); });\n    if (upperMethods.indexOf(request.method) === -1) { return null; }\n  } else if (this.request.method.toUpperCase() !== request.method) {\n    return null;\n  }\n\n  return matches;\n};\n\nfunction record(me, urlToRecord) {\n  var recorder;\n  var recording = {};\n  var parsed = url.parse(urlToRecord);\n  var options = {\n    method: me.request.method == null ? 'GET' : me.request.method,\n    hostname: parsed.hostname,\n    headers: me.request.headers,\n    port: parsed.port,\n    path: parsed.pathname + '?'\n  };\n\n  if (parsed.query != null) {\n    options.path += parsed.query + '&';\n  }\n  if (me.request.query != null) {\n    options.path += q.stringify(me.request.query);\n  }\n\n  recorder = http.request(options, function (res) {\n    recording.status = res.statusCode;\n    recording.headers = res.headers;\n    recording.body = '';\n    res.on('data', function (chunk) { recording.body += chunk; });\n    res.on('end', function () { out.notice('recorded ' + urlToRecord); });\n  });\n\n  recorder.on('error', function (e) { out.warn('error recording response ' + urlToRecord + ': ' + e.message); });\n  recording.post = me.request.post == null ? new Buffer(0) : new Buffer(me.request.post, 'utf8');\n\n  if (me.request.file != null) {\n    try {\n      recording.post = fs.readFileSync(path.resolve(me.datadir, me.request.file));\n    } catch (e) { /* ignored */ }\n  }\n\n  recorder.write(recording.post);\n  recorder.end();\n\n  return recording;\n}\n\nfunction normalizeEOL(string) {\n  return string.replace(/\\r\\n/g, '\\n').replace(/\\s*$/, '');\n}\n\nfunction purifyRequest(incoming) {\n  var outgoing;\n\n  if (incoming == null) { incoming = {}; }\n\n  outgoing = {\n    url: incoming.url,\n    method: incoming.method == null ? 'GET' : incoming.method,\n    headers: purifyHeaders(incoming.headers),\n    query: incoming.query,\n    file: incoming.file,\n    post: incoming.post\n  };\n\n  if (incoming.json) {\n    outgoing.json = JSON.parse(incoming.json);\n  }\n\n  outgoing.headers = purifyAuthorization(outgoing.headers);\n  outgoing = pruneUndefined(outgoing);\n  return outgoing;\n}\n\nfunction purifyResponse(me, incoming) {\n  var outgoing = [];\n\n  if (incoming == null) { incoming = []; }\n  if (!(incoming instanceof Array)) { incoming = [incoming]; }\n  if (incoming.length === 0) { incoming.push({}); }\n\n  incoming.forEach(function (response) {\n    if (typeof response === 'string') {\n      outgoing.push(record(me, response));\n    } else {\n      outgoing.push(pruneUndefined({\n        headers: purifyHeaders(response.headers),\n        status: parseInt(response.status, 10) || 200,\n        latency: parseInt(response.latency, 10) || null,\n        file: response.file,\n        body: purifyBody(response.body)\n      }));\n    }\n  });\n\n  return outgoing;\n}\n\nfunction purifyHeaders(incoming) {\n  var prop;\n  var outgoing = {};\n\n  for (prop in incoming) {\n    if (incoming.hasOwnProperty(prop)) {\n      outgoing[prop.toLowerCase()] = incoming[prop];\n    }\n  }\n\n  return outgoing;\n}\n\nfunction purifyAuthorization(headers) {\n  var auth, userpass;\n\n  if (headers == null || headers.authorization == null) { return headers; }\n\n  auth = headers.authorization || '';\n\n  if (/^Basic .+:.+$/.test(auth)) {\n    userpass = auth.substr(6);\n    headers.authorization = 'Basic ' + new Buffer(userpass).toString('base64');\n  }\n\n  return headers;\n}\n\nfunction purifyBody(body) {\n  if (body == null) { body = ''; }\n\n  if (typeof body === 'object') {\n    return JSON.stringify(body);\n  }\n\n  return body;\n}\n\nfunction pruneUndefined(incoming) {\n  var key, value;\n  var outgoing = {};\n\n  for (key in incoming) {\n    if (!incoming.hasOwnProperty(key)) { continue; }\n\n    value = incoming[key];\n    if (value != null) { outgoing[key] = value; }\n  }\n\n  return outgoing;\n}\n\nfunction compareHashMaps(configured, incoming) {\n  var key;\n  var headers = {};\n  if (configured == null) { configured = {}; }\n  if (incoming == null) { incoming = {}; }\n\n  for (key in configured) {\n    if (!configured.hasOwnProperty(key)) { continue; }\n    headers[key] = matchRegex(configured[key], incoming[key]);\n    if (!headers[key]) { return null; }\n  }\n\n  return headers;\n}\n\nfunction compareObjects(configured, incoming) {\n  var key;\n\n  for (key in configured) {\n    if (typeof configured[key] !== typeof incoming[key]) { return false; }\n\n    if (typeof configured[key] === 'object') {\n      if (!compareObjects(configured[key], incoming[key])) { return false; }\n    } else if (configured[key] !== incoming[key]) { return false; }\n  }\n\n  return true;\n}\n\nfunction matchRegex(compileMe, testMe) {\n  if (testMe == null) { testMe = ''; }\n  return String(testMe).match(RegExp(compileMe, 'm'));\n}\n\nmodule.exports = Endpoint;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/lib/clone.js":"'use strict';\n\nmodule.exports = function clone(x) {\n  return JSON.parse(JSON.stringify(x));\n};\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/src/console/watch.js":"'use strict';\n\nvar fs = require('fs');\nvar crypto = require('crypto');\nvar contract = require('../models/contract');\nvar out = require('./out');\nvar yaml = require('js-yaml');\n\nvar interval = 3000;\nvar intervalId = null;\nvar watching = false;\n\nfunction Watcher(endpoints, filename) {\n  var shasum;\n\n  this.endpoints = endpoints;\n  this.filename = filename;\n\n  shasum = crypto.createHash('sha1');\n  shasum.update(fs.readFileSync(this.filename, 'utf8'));\n\n  this.sha = shasum.digest('hex');\n  this.activate();\n}\n\nWatcher.prototype.deactivate = function () {\n  watching = false;\n  return clearInterval(intervalId);\n};\n\nWatcher.prototype.activate = function () {\n  if (watching) { return; }\n\n  watching = true;\n  out.status('Watching for changes in ' + this.filename + '...');\n  intervalId = setInterval(this.refresh.bind(this), interval);\n};\n\nWatcher.prototype.refresh = function () {\n  var sha, errors;\n  var shasum = crypto.createHash('sha1');\n  var data = fs.readFileSync(this.filename, 'utf8');\n\n  shasum.update(data);\n  sha = shasum.digest('hex');\n\n  if (sha !== this.sha) {\n    try {\n      data = yaml.load(data);\n      errors = contract(data);\n\n      if (errors) {\n        out.error(errors);\n      } else {\n        this.endpoints.db = [];\n        this.endpoints.create(data, function () {});\n        out.notice('\"' + this.filename + '\" was changed. It has been reloaded.');\n      }\n    } catch (e) {\n      out.warn('Couldn\\'t parse \"' + this.filename + '\" due to syntax errors:');\n      out.log(e.message);\n    }\n  }\n\n  this.sha = sha;\n};\n\nmodule.exports = Watcher;\n","/home/travis/build/npmtest/node-npmtest-stubby/node_modules/stubby/webroot/js/scripts.js":"(function(window) {\n  var stubby = window.stubby || {};\n  var template = [ // eww\n  '<li>',\n  '  <table>',\n  '     <caption><a href=\"<%= adminUrl %>\">Endpoint <%= id %></a></caption>',\n  '     <tr>',\n  '        <th class=\"section\" colspan=\"2\">request</th>',\n  '     </tr>',\n  '     <tr>',\n  '        <th class=\"property\">url</th>',\n  '        <td><%= request.url %></td>',\n  '     </tr>',\n  '     <% if(request.method) { %>',\n  '     <tr>',\n  '        <th class=\"property\">method</th>',\n  '        <td><%= request.method %></td>',\n  '     </tr>',\n  '     <% } if(request.query) { %>',\n  '     <tr>',\n  '        <th class=\"property\">query</th>',\n  '        <td><% print(queryParams(request.query)); %></td>',\n  '     </tr>',\n  '     <tr>',\n  '        <th></th>',\n  '        <td>',\n  '           <ul>',\n  '              <% _.each(_.keys(request.query), function(key) { %>',\n  '              <li>',\n  '                 <dt><%= key %></dt>',\n  '                 <dd><%= request.query[key] %></dd>',\n  '              </li>',\n  '              <% }); %>',\n  '           </ul>',\n  '        </td>',\n  '     </tr>',\n  '     <% } if(request.headers && Object.keys(request.headers).length > 0) { %>',\n  '     <tr>',\n  '        <th class=\"property\">headers</th>',\n  '        <td>',\n  '           <ul>',\n  '              <% _.each(_.keys(request.headers), function(key) { %>',\n  '              <li>',\n  '                 <dt><%= key %></dt>',\n  '                 <dd><%= request.headers[key] %></dd>',\n  '              </li>',\n  '              <% }); %>',\n  '           </ul>',\n  '        </td>',\n  '     </tr>',\n  '     <% } if(request.post) { %>',\n  '     <tr>',\n  '        <th class=\"property\">post</th>',\n  '        <td><pre><code><%= request.post %></code></pre></td>',\n  '     </tr>',\n  '     <% } if(request.file) { %>',\n  '     <tr>',\n  '        <th class=\"property\">file</th>',\n  '        <td><%= request.file %></td>',\n  '     </tr>',\n  '     <% } %>',\n  '     <tr>',\n  '        <th class=\"section\" colspan=\"2\">response</th>',\n  '     </tr>',\n  '     <% if(response.status) { %>',\n  '     <tr>',\n  '        <th class=\"property\">status</th>',\n  '        <td><%= response.status %></td>',\n  '     </tr>',\n  '     <% } if(response.headers && Object.keys(response.headers).length > 0) { %>',\n  '     <tr>',\n  '        <th class=\"property\">headers</th>',\n  '        <td>',\n  '           <ul>',\n  '              <% _.each(_.keys(response.headers), function(key) { %>',\n  '              <li>',\n  '                 <dt><%= key %></dt>',\n  '                 <dd><%= response[0].headers[key] %></dd>',\n  '              </li>',\n  '              <% }); %>',\n  '           </ul>',\n  '        </td>',\n  '     </tr>',\n  '     <% } if(response[0].body) { %>',\n  '     <tr>',\n  '        <th class=\"property\">body</th>',\n  '        <td><pre><code><%= response[0].body %></code></pre></td>',\n  '     </tr>',\n  '     <% } if(response[0].file) { %>',\n  '     <tr>',\n  '        <th class=\"property\">file</th>',\n  '        <td><%= response[0].file %></td>',\n  '     </tr>',\n  '     <% } if(response[0].latency) { %>',\n  '     <tr>',\n  '        <th class=\"property\">latency</th>',\n  '        <td><%= response[0].latency %></td>',\n  '     </tr>',\n  '     <% } %>',\n  '     <tr>',\n  '        <th class=\"section\">hits</th>',\n  '        <td><%= hits %></td>',\n  '     </tr>',\n  '  </table>',\n  '</li>',\n  ].join('\\n');\n\n  function queryParams(query) {\n    var result = \"?\";\n\n    for (var key in query) {\n      var value = query[key];\n\n      result += encodeURIComponent(key);\n      result += \"=\";\n      result += encodeURIComponent(value);\n      result += \"&\";\n    }\n\n    return result.replace(/\\&$/, '');\n  };\n\n  var ajax = null;\n  var list = null;\n\n  function success() {\n    var endpoint, _fn, _i, _len;\n    var endpoints = JSON.parse(ajax.responseText);\n\n    for (var i = 0; i < endpoints.length; i++) {\n      var endpoint = endpoints[i];\n\n      endpoint.queryParams = queryParams;\n      endpoint.adminUrl = window.location.href.replace(/status/, endpoint.id);\n\n      var html = _.template(template)(endpoint);\n      list.innerHTML += html;\n    }\n\n    hljs.initHighlighting();\n  }\n\n  function complete(e) {\n    if (ajax.readyState !== 4) { return; }\n\n    if (ajax.status === 200) { return success(); }\n    else { return console.error(ajax.statusText); }\n  }\n\n  stubby.status = function() {\n    list = document.getElementById('endpoints');\n\n    ajax = new window.XMLHttpRequest();\n    ajax.open('GET', '/', true);\n    ajax.onreadystatechange = complete;\n    ajax.send(null);\n  };\n\n  window.stubby = stubby;\n})(this);\n"}